package chessPieces;

import java.util.Vector;

import chessBackend.Board;
import chessBackend.MoveNote;
import chessBackend.Player;
import chessBackend.Move;

public class PieceBase {
	private int row;
	private int col;
	private Board board;
	private Vector<Move> validMoves;
	private Player player;
	private boolean moved;
	private int value;

	public PieceBase(Player player, int row, int col) {

		moved = false;
		validMoves = new Vector<Move>();

		this.player = player;
		this.row = row;
		this.col = col;

	}

	public PieceBase(Player player, int row, int col, boolean moved,
			int value) {
		this.row = row;
		this.col = col;
		this.player = player;
		this.moved = moved;
		this.value = value;
		validMoves = new Vector<Move>();
	}

	public int getRow() {
		return row;
	}

	public int getCol() {
		return col;
	}

	public void setPos(int row, int col) {
		this.row = row;
		this.col = col;
	}

	public void setPieceValue(int value) {
		this.value = value;
	}

	public int getPieceValue() {
		return value;
	}

	public void move(Move newMove) {
		setPos(newMove.getToRow(), newMove.getToCol());
		moved = true;
		//clearValidMoves();
	}

	public void addValidMove(Move newMove) {
		validMoves.add(newMove);
	}

	public void clearValidMoves() {
		validMoves.removeAllElements();
	}

	/**
	 * @param newMove
	 *            Used just for its to/from vector generated by the gui
	 * @return The Move object that is listed as being valid on the piece. This
	 *         Move object has a DecisionNode object that allows the AI to
	 *         quickly identify which path in the decision tree the user is
	 *         following.
	 */
	public Move checkIfValidMove(Move newMove) {
		Move validMove;
		for (int m = 0; m < validMoves.size(); m++) {
			validMove = validMoves.elementAt(m);
			if (validMove.equals(newMove) && validMove.getNote()!=MoveNote.INVALIDATED)
				return validMove;
		}

		return null;
	}

	public Vector<Move> getValidMoves() {
		return validMoves;
	}

	public Player getPlayer() {
		return player;
	}

	public boolean hasMoved() {
		return moved;
	}

	public Board getBoard() {
		return board;
	}

	public void setBoard(Board board) {
		this.board = board;
	}

}
